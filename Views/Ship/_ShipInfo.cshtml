@using Microsoft.AspNetCore.Mvc.Localization

@inject IViewLocalizer Localizer
@model Susteni.Models.Ship.ShipModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<style>

    .k-fab-text {
        display: none;
    }


    #editor table, th {
        margin-left: 0px;
        margin-top: 0px;
    }

    #fuelPricesContainer {
        background-color: #f8f9fa;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 6px;
        font-size: 13px;
        width: 100%;
        min-width: 160px;
        right: 60px;
        top: 50px;
        }

    #fuelPricesContainer table {
        width: 100%;
    }

    #fuelPricesContainer input[type="number"] {
        width: 100%;
        font-size: 13px;
        padding: 3px 6px;
    }

    .fuel-price-input {
    font-size: 13px;
    padding: 4px 6px;
    border-radius: 4px;
    border: 1px solid #ccc;
    width: 100%;
    }




</style>


<script>
    

    function duplicateSelectedGenerator() {
        var grid = $("#shipGeneratorList").data("kendoGrid");
        var selected = grid.select();

        if (selected.length === 0) {
            alert("No generator selected for duplication.");
            return;
        }

        var dataItem = grid.dataItem(selected);
        if (!dataItem) {
            alert("Error retrieving selected generator data.");
            return;
        }

        // Obter lista de nomes existentes
        var existingNames = grid.dataSource.data().map(item => item.Name);
        var baseName = dataItem.Name.replace(/\d+$/, "").trim();
        var highestNumber = 0;

        existingNames.forEach(name => {
            var match = name.match(/\d+$/);
            if (match && name.includes(baseName)) {
                var num = parseInt(match[0]);
                if (num > highestNumber) {
                    highestNumber = num;
                }
            }
        });

        var newGenerator = {
            GeneratorGuid: kendo.guid(),
            ShipGuid: dataItem.ShipGuid,
            Name: baseName + " " + (highestNumber + 1),
            Order: highestNumber + 1,

            // ✅ Todos os campos importantes:
            TypeGuid: dataItem.TypeGuid,
            FuelTypeGuid: dataItem.FuelTypeGuid,
            kW: dataItem.kW,
            KgDieselkWh: dataItem.KgDieselkWh,
            KgDieselkWh2: dataItem.KgDieselkWh2,
            FuelPrice: dataItem.FuelPrice,
            FuelPrice2: dataItem.FuelPrice2,
            EfficientMotorSwitchboard: dataItem.EfficientMotorSwitchboard,
            EfficientMotorSwitchboard2: dataItem.EfficientMotorSwitchboard2,
            MaintenanceCost: dataItem.MaintenanceCost,
            MaintenanceCost2: dataItem.MaintenanceCost2,
            PowerProduction: dataItem.PowerProduction,
            ExcludeAutoTune: dataItem.ExcludeAutoTune,
            EffectBefore: dataItem.EffectBefore,
            EffectAfter: dataItem.EffectAfter,
            Faktor: dataItem.Faktor,
            FuelBefore: dataItem.FuelBefore,
            FuelAfter: dataItem.FuelAfter,
            CO2Before: dataItem.CO2Before,
            CO2After: dataItem.CO2After,
            NOxBefore: dataItem.NOxBefore,
            NOxAfter: dataItem.NOxAfter,
            SOxBefore: dataItem.SOxBefore,
            SOxAfter: dataItem.SOxAfter
        };

        saveGenerators([newGenerator]);
    }





    // Tornar a função acessível globalmente
    window.duplicateSelectedGenerator = duplicateSelectedGenerator;



    function saveGenerators(generators) {
        if (!Array.isArray(generators) || generators.length === 0) {
            console.warn("⚠️ No generator provided to save.");
            alert("No generator was prepared to be saved.");
            return;
        }

        $.ajax({
            url: "http://localhost:5210/Ship/SaveGenerators",
            method: "POST",
            contentType: "application/json",
            data: JSON.stringify(generators),
            success: function (response) {
                console.log("✅ Generators saved successfully:", response);

                // Recarrega o grid, se existir
                const grid = $("#shipGeneratorList").data("kendoGrid");
                if (grid) {
                    grid.dataSource.read().then(function () {
                        grid.refresh();
                        console.log("🔁 Grid reloaded after saving the generator.");
                    });
                }

                alert("Generator saved successfully!");
            },
            error: function (xhr) {
                console.error("❌ Error saving generators:", xhr);
                let message = "Failed to save generator.";

                if (xhr.responseJSON && xhr.responseJSON.details)
                    message += "\nDetails: " + xhr.responseJSON.details;

                alert(message);
            }
        });
    }






        function duplicateSelectedProfile() {
            var grid = $("#shipProfilesList").data("kendoGrid");
            var selected = grid.select();

            if (selected.length === 0) {
                alert("No profile selected for duplication.");
                return;
            }

            var dataItem = grid.dataItem(selected);
            
            if (!dataItem) {
                alert("Error retrieving selected profile data.");
                return;
            }

            var newProfile = {
                ProfilGuid: kendo.guid(), // Gera um novo ID único
                Name: dataItem.Name + " (Copy)"
            };

            grid.dataSource.add(newProfile);
            grid.refresh();

            console.log("New duplicated profile:", newProfile);
        }

// Tornar a função acessível globalmente
    window.duplicateSelectedProfile = duplicateSelectedProfile;


    function removeGenerator() {
    var grid = $("#shipGeneratorList").data("kendoGrid");
    var selected = grid.select();

    if (selected.length === 0) {
        alert("No generator selected for removal.");
        return;
    }

    selected.each(function () {
        var dataItem = grid.dataItem(this);
        if (dataItem && dataItem.GeneratorGuid) {
            // Requisição para backend
            $.ajax({
                url: "http://localhost:5210/Ship/RemoveShipGenerator",
                method: "POST",
                contentType: "application/json",
                data: JSON.stringify({
                    //UserId: "support",
                    //Password: "Morten09gutt",
                    Server: "localhost\\SQLEXPRESS",
                    Database: "Susteni",
                    Parameters: {
                        filter: `GeneratorGuid = '${dataItem.GeneratorGuid}'`
                    }
                }),
                success: function (response) {
                    console.log("Generator successfully removed:", dataItem.GeneratorGuid);

                    // Agora sim remove do grid depois do sucesso no backend
                    grid.dataSource.remove(dataItem);
                    grid.refresh();
                },
                error: function (err) {
                    console.error("Error deleting generator:", err);
                    alert("Error deleting the generator from the database.");
                }
            });
        }
    });
}


    // Torna a função acessível globalmente
    window.removeGenerator = removeGenerator;



</script>


<div id="shipForm">

    <input hidden asp-for="Ship.ShipGuid" class="form-control">
    <input type="hidden" asp-for="Ship.CustomerGuid" class="form-control">

    <div class="row">
        <div class="col-12" style="margin-bottom: 0px; margin-top: 10px;">
            <div class="panel with-nav-tabs panel-default" id="dataenter" style="height: 370px;" >
                <div class="panel-body data padding-0">
                    <div class="tab-content data">
                        <div class="panel-heading" id="Tab">
                            <ul class="nav nav-tabs">
                                <li class="nav-item"><a class="nav-link active" aria-current="page" href="#tabInfo" data-bs-toggle="tab">@Localizer["Info"]</a></li>
                                <li class="nav-item"><a class="nav-link" aria-current="page" href="#tabText" data-bs-toggle="tab">@Localizer["Text"]</a></li>
                            </ul>
                        </div>
                        <div class="panel-body">
                            <div class="tab-content" style="margin-top: 10px;">

                                <div class="tab-pane fade show active" style="padding: 10px;" role="tabpanel" id="tabInfo">

                                    <div class="row">
                                        <div class="col-8">

                                            <div class="row align-items-center" style="display: flex; flex-direction: row;">
                                                <label class="col-2 col-form-label">Name</label>
                                                <div class="col-lg-6">
                                                    @(Html.Kendo().TextBox()
                                                        .Name("Ship.Name")
                                                        .HtmlAttributes(new { @class = "nodvendigFelt" })
                                                        .Value(Model.Ship.Name)
                                                        )
                                                </div>
                                                <label class="col-2 col-form-label">Build year</label>
                                                <div class="col-lg-2">
                                                    <div class="col-3">
                                                        @(Html.Kendo().NumericTextBox<int>()
                                                            .Name("Ship.YearOfBuilt")
                                                            .Format("#####")
                                                            .Value(Model.Ship.YearOfBuilt)
                                                            .Spinners(false)
                                                            .HtmlAttributes(new { style = "width: 100px;" })
                                                            )
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="row align-items-center" style="display: flex; flex-direction: row;">
                                                <label class="col-2 col-form-label">IMO</label>
                                                <div class="col-lg-6">
                                                    @(Html.Kendo().TextBox()
                                                        .Name("Ship.IMO")
                                                        .Value(Model.Ship.IMO)
                                                        )
                                                </div>
                                            </div>


                                            <div class="row align-items-center" style="display: flex; flex-direction: row;">
                                                <label class="col-2 col-form-label">Type</label>
                                                <div class="col-lg-6">
                                                    @(Html.Kendo().DropDownList()
                                                        .Name("Ship.ShipTypeGuid")
                                                        .DataTextField("Name")
                                                        .DataValueField("ShipTypeGuid")
                                                        .OptionLabel(Localizer["Choose type from list ..."].Value)
                                                        .OptionLabelTemplate("<span><i>" + Localizer["Choose type from list ..."].Value + "</i></span>")
                                                        .Height(200)
                                                        .Value(Model.Ship.ShipTypeGuid)
                                                        .DataSource(dataSource => dataSource
                                                            .Ajax()
                                                            .Read(read => read.Action("GetShipTypeList", "Ship"))
                                                            )
                                                        )
                                                </div>
                                            </div>

                                            <div class="row align-items-center" style="display: flex; flex-direction: row;">
                                                <label class="col-2 col-form-label">Length</label>
                                                <div class="col-3">
                                                    @(Html.Kendo().NumericTextBox<int>()
                                                        .Name("Ship.Length")
                                                        .Format("#####")
                                                        .Value(Model.Ship.Length)
                                                        .Step(10)
                                                        .HtmlAttributes(new { style = "width: 100%;" })
                                                        )
                                                </div>
                                                <label class="col-1 col-form-label">Width</label>
                                                <div class="col-3">
                                                    @(Html.Kendo().NumericTextBox<int>()
                                                        .Name("Ship.Width")
                                                        .Format("#####")
                                                        .Value(Model.Ship.Width)
                                                        .Step(10)
                                                        .HtmlAttributes(new { style = "width: 100%;" })
                                                        )
                                                </div>
                                            </div>


                                            <div class="row align-items-center" style="display: flex; flex-direction: row;">
                                                <label class="col-4 col-form-label">Gross tonnage</label>
                                                <div class="col-2">
                                                        @(Html.Kendo().NumericTextBox<int>()
                                                            .Name("Ship.GrossTonnage")
                                                            .Format("#####")
                                                            .Value(Model.Ship.GrossTonnage)
                                                            .Step(10)
                                                            .HtmlAttributes(new { style = "width: 100%;" })
                                                            )
                                                </div>
                                            </div>

                                            <div class="row align-items-center" style="display: flex; flex-direction: row;">
                                                <label class="col-4 col-form-label">Number of days</label>
                                                <div class="col-2">
                                                    @(Html.Kendo().NumericTextBox<int>()
                                                        .HtmlAttributes(new { @class = "nodvendigFelt" })
                                                        .Name("Ship.NumberOfDays")
                                                        .Format("#####")
                                                        .Value(Model.Ship.NumberOfDays)
                                                        )
                                                </div>
                                            </div>
                                            <div class="row align-items-center" style="display: none;">
                                                <label class="col-4 col-form-label">Fuel consumption pr. year</label>
                                                <div class="col-3">
                                                    @(Html.Kendo().NumericTextBox<int>()
                                                        .Name("Ship.FuelConsPrYear")
                                                        .Format("#####")
                                                        .Value(Model.Ship.FuelConsPrYear)
                                                        .HtmlAttributes(new { style="width: calc(100% - 30px);" })
                                                        )
                                                    <span id="fuleType">m³</span>
                                                </div>                                                
                                            </div>
                                            <div class="row align-items-center" style="display: flex; flex-direction: row;">
                                                <label class="col-4 col-form-label">Unit of measurement</label>
                                                <div class="col-2">
                                                @(Html.Kendo().DropDownList()
                                                    .Name("Ship.UnitOfMeasurement")
                                                    .DataTextField("Text")
                                                    .DataValueField("Value")
                                                    .OptionLabel("Velg fra listen...")
                                                    .OptionLabelTemplate("<span><i>Velg fra listen...</i></span>")
                                                    .BindTo(new List<SelectListItem>() {
                                                        new SelectListItem() {
                                                        Text = Localizer["m³"].Value , Value = "0"
                                                        },
                                                        new SelectListItem() {
                                                        Text = Localizer["ton"].Value, Value = "1"
                                                        }
                                                        })
                                                    .Value(Model.Ship.UnitOfMeasurement.ToString())
                                                    .HtmlAttributes(new { style = "width: 100%;" })
                                                    .Events(e => e.Cascade("onUOMChange"))
                                                    )
                                                </div>
                                            </div>
                                        </div>


                                        <div class="col-4">
                                            <div class="row">
                                                <div class="col-6">
                                                    <div id="fuelPricesContainer" class="k-card" style="display: block;">
                                                        <h6 style="font-weight: bold; font-size: 13px; color: #a6c5f7; margin-bottom: 10px;">Fuel Prices</h6>

                                                        <div class="row mb-2">
                                                            <div class="col-6">
                                                                <select id="fuelTypeSelector" class="form-select form-select-sm" style="font-size: 13px;">
                                                                    <option value="">Select fuel type...</option>
                                                                    <option value="MGO">MGO</option>
                                                                    <option value="HFO">HFO</option>
                                                                    <option value="LNG">LNG</option>
                                                                    <option value="BIO">BIO</option>
                                                                    <!-- Adicione mais opções conforme necessário -->
                                                                </select>
                                                            </div>
                                                            <div class="col-4">
                                                                <input type="number" id="fuelPriceInput" class="form-control form-control-sm" placeholder="Price" step="0.01" />
                                                            </div>
                                                            <div class="col-2">
                                                                <button id="addFuelPriceBtn" type="button" class="btn btn-sm btn-primary w-100"
                                                                    style="height: 30px; font-size: 13px; display: flex; align-items: center; justify-content: center; background-color: #a6c5f7;">
                                                                    Add
                                                                </button>
                                                            </div>
                                                        </div>

                                                        <table class="table table-sm" style="font-size: 13px;">
                                                            <thead>
                                                                <tr>
                                                                    <th style="width: 60%">Fuel Type</th>
                                                                    <th style="width: 40%">Price</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody id="fuelPricesTable">
                                                                <!-- Conteúdo JS -->
                                                            </tbody>
                                                        </table>
                                                    </div>

                                                    
                                                </div>
                                                <div class="col-6 d-flex align-items-center justify-content-center">
                                                    <div id="filPreview">
                                                        @if (Model.Ship.byte64Picture.Length > 0)
                                                        {
                                                            <img src="data:image/Jpeg;base64,@Model.Ship.byte64Picture" style="max-width: 100%; max-height: 300px;" />
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        </div>




                                    </div>
                                </div>
                                
                                <div class="tab-pane fade" style="padding: 10px;" role="tabpanel" id="tabText">

                                    <div class="row">
                                        <div class="col-12">

                                            @(Html.Kendo().TextArea()
                                                .Name("Ship.InfoText")
                                                .Size(ComponentSize.Medium)
                                                .Rounded(Rounded.Medium)
                                                .FillMode(FillMode.Solid)
                                                .Value(Model.Ship.InfoText)
                                                .Rows(12)
                                                .HtmlAttributes(new { style = "width: 100%" })
                                                )

                                        </div>



                                    </div>

                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">

        <div class="col-6" style="margin-bottom: 0px; margin-top: 10px;">
            <div class="panel with-nav-tabs panel-default" id="dataenter">
                <div class="panel-body data padding-0">
                    <div class="tab-content data">
                        <div class="panel-heading" id="Tab">
                            <ul class="nav nav-tabs">
                                <li class="nav-item"><a class="nav-link active" aria-current="page" href="#tabOM" data-bs-toggle="tab">@Localizer["Operation modes"]</a></li>
                                <li class="nav-item"><a class="nav-link" aria-current="page" href="#tabProfile" data-bs-toggle="tab">@Localizer["Profiles"]</a></li>
                            </ul>
                        </div>
                        <div class="panel-body">
                            <div class="tab-content" style="margin-top: 10px;">
                                <div class="tab-pane fade show active" style="padding: 10px;" role="tabpanel" id="tabOM">

                                    <div class="row">
                                        <div class="col-lg-12">
                                            <div style="position: relative">
                                            @(Html.Kendo().Grid<Susteni.Models.ShipOperationModeItem>()
                                                .Name("shipOperationmodeList")
                                                .Columns(columns =>
                                                {
                                                    columns.Bound(q => q.OperationModeGuid).Visible(false).Title(Localizer["#"].Value);
                                                    columns.Bound(q => q.Order).Width(60).Title(Localizer["#"].Value);
                                                    columns.Bound(q => q.Name).Title(Localizer["Operation mode"].Value);
                                                    columns.Bound(q => q.NumberGenerator).Width(120).Title(Localizer["# Generators"].Value);
                                                        columns.Bound(q => q.HoursPrYear).Width(120).Title(Localizer["Hours pr. Year"].Value).ClientFooterTemplate("One year is #=sum# hours");
                                                })
                                                .HtmlAttributes(new { style = "height: 300px;" })
                                                .Scrollable()
                                                .Selectable(s => s
                                                .Mode(GridSelectionMode.Multiple)
                                                .Type(GridSelectionType.Row))
                                                    .Events(e => e.Change("onOperationModeChange"))
                                                .DataSource(dataSource => dataSource
                                                    .Ajax()
                                                    .Read(read => read.Action("GetShipOperationModeList", "Ship").Data("filterShip"))
                                                    .Aggregates( agg=> agg.Add(p => p.HoursPrYear).Sum())
                                                    )
                                                )

                                                @(Html.Kendo().FloatingActionButton()
                                                    .Name("operationModeAdd")
                                                    .ThemeColor(FloatingActionButtonThemeColor.Success)
                                                    .Size(FloatingActionButtonSize.Small)
                                                    .PositionMode(FloatingActionButtonPositionMode.Absolute)
                                                    .Align(FloatingActionButtonAlign.TopEnd)
                                                    .AlignOffset(alignOffset => alignOffset.Horizontal(0).Vertical(10))
                                                    .Icon("plusIcon")
                                                    .Events(events => events.Click("showDialogOperationMode"))
                                                    .Visible(false)
                                                    )


                                                @(Html.Kendo().FloatingActionButton()
                                                    .Name("operationModeCopy")
                                                    .ThemeColor(FloatingActionButtonThemeColor.Success)
                                                    .Size(FloatingActionButtonSize.Small)
                                                    .PositionMode(FloatingActionButtonPositionMode.Absolute)
                                                    .Align(FloatingActionButtonAlign.TopEnd)
                                                    .AlignOffset(alignOffset => alignOffset.Horizontal(0).Vertical(50))
                                                    .Icon("CopyIcon")
                                                    .Events(events => events.Click("showDialogOperationMode"))
                                                    .Visible(false)
                                                    )

                                                

                                                @(Html.Kendo().FloatingActionButton()
                                                    .Name("operationModeEdit")
                                                    .ThemeColor(FloatingActionButtonThemeColor.Warning)
                                                    .Size(FloatingActionButtonSize.Small)
                                                    .PositionMode(FloatingActionButtonPositionMode.Absolute)
                                                    .Align(FloatingActionButtonAlign.TopEnd)
                                                    .AlignOffset(alignOffset => alignOffset.Horizontal(0).Vertical(90))
                                                    .Icon("pencilIcon")
                                                    .Events(events => events.Click("showDialogOperationModeEdit"))
                                                    .Visible(false)
                                                    )

                                                @(Html.Kendo().FloatingActionButton()
                                                    .Name("operationModeRemove")
                                                    .ThemeColor(FloatingActionButtonThemeColor.Error)
                                                    .Size(FloatingActionButtonSize.Small)
                                                    .PositionMode(FloatingActionButtonPositionMode.Absolute)
                                                    .Align(FloatingActionButtonAlign.TopEnd)
                                                    .AlignOffset(alignOffset => alignOffset.Horizontal(0).Vertical(130))
                                                    .Icon("trashIcon")
                                                    .Events(events => events.Click("removeOperationMode"))
                                                    .Visible(false)
                                                    )
                                            </div>
                                        </div>
                                    </div>

                                </div>
                                <div class="tab-pane fade" style="padding: 10px;" role="tabpanel" id="tabProfile">

                                    <div class="row">
                                        <div class="col-lg-12">
                                            <div style="position: relative">
                                                @(Html.Kendo().Grid<Susteni.Models.ProfileItem>()
                                                    .Name("shipProfilesList")
                                                    .Columns(columns =>
                                                    {
                                                        columns.Bound(q => q.ProfilGuid).Visible(false).Title(Localizer["#"].Value);
                                                        columns.Bound(q => q.Name).Title(Localizer["Profile"].Value);
                                                    })
                                                    .HtmlAttributes(new { style = "height: 300px;" })
                                                    .Scrollable()
                                                    .Selectable(s => s
                                                    .Mode(GridSelectionMode.Multiple)
                                                    .Type(GridSelectionType.Row))
                                                    .Events(e => e.Change("onProfileChange"))
                                                    .DataSource(dataSource => dataSource
                                                        .Ajax()
                                                        .Read(read => read.Action("GetProfileList", "Ship").Data("filterShip"))
                                                        )
                                                    )


                                                

                                                @(Html.Kendo().FloatingActionButton()
                                                    .Name("profileAdd")
                                                    .ThemeColor(FloatingActionButtonThemeColor.Success)
                                                    .Size(FloatingActionButtonSize.Small)
                                                    .PositionMode(FloatingActionButtonPositionMode.Absolute)
                                                    .Align(FloatingActionButtonAlign.TopEnd)
                                                    .AlignOffset(alignOffset => alignOffset.Horizontal(0).Vertical(10))
                                                    .Icon("plusIcon")
                                                    .Events(events => events.Click("newProfiles"))
                                                    .Visible(true)
                                                    )


                                                @(Html.Kendo().FloatingActionButton()
                                                    .Name("profileDuplicate")
                                                    .ThemeColor(FloatingActionButtonThemeColor.Warning)
                                                    .Size(FloatingActionButtonSize.Small)
                                                    .PositionMode(FloatingActionButtonPositionMode.Absolute)
                                                    .Align(FloatingActionButtonAlign.TopEnd)
                                                    .AlignOffset(alignOffset => alignOffset.Horizontal(0).Vertical(50))
                                                    .Icon("copy")
                                                    .Events(events => events.Click("duplicateSelectedProfile")) 
                                                    .Visible(false) // Inicialmente oculto
                                                )


                                                @(Html.Kendo().FloatingActionButton()
                                                    .Name("profileEdit")
                                                    .ThemeColor(FloatingActionButtonThemeColor.Warning)
                                                    .Size(FloatingActionButtonSize.Small)
                                                    .PositionMode(FloatingActionButtonPositionMode.Absolute)
                                                    .Align(FloatingActionButtonAlign.TopEnd)
                                                    .AlignOffset(alignOffset => alignOffset.Horizontal(0).Vertical(90))
                                                    .Icon("pencilIcon")
                                                    .Events(events => events.Click("showDialogProfilEdit"))
                                                    .Visible(false)
                                                    )

                                                @(Html.Kendo().FloatingActionButton()
                                                    .Name("profileRemove")
                                                    .ThemeColor(FloatingActionButtonThemeColor.Error)
                                                    .Size(FloatingActionButtonSize.Small)
                                                    .PositionMode(FloatingActionButtonPositionMode.Absolute)
                                                    .Align(FloatingActionButtonAlign.TopEnd)
                                                    .AlignOffset(alignOffset => alignOffset.Horizontal(0).Vertical(130))
                                                    .Icon("trashIcon")
                                                    .Events(events => events.Click("removeProfil"))
                                                    .Visible(false)
                                                    )
                                            </div>
                                        </div>
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    
    
        <div class="col-6" style="margin-bottom: 0px; margin-top: 10px;">
            <div class="panel with-nav-tabs panel-default" id="dataenter">
                <div class="panel-body data padding-0">
                    <div class="tab-content data">
                        <div class="panel-heading" id="Tab">
                            <ul class="nav nav-tabs">
                                <li class="nav-item"><a class="nav-link active" aria-current="page" href="#tabG" data-bs-toggle="tab">@Localizer["Power production"]</a></li>
                            </ul>
                        </div>
                        <div class="panel-body">
                            <div class="tab-content" style="margin-top: 10px;">
                                <div class="tab-pane fade show active" style="padding: 10px;" role="tabpanel" id="tabG">

                                    <div class="row">
                                        <div class="col-lg-12">
                                            <div style="position: relative">
                                                @(Html.Kendo().Grid<Susteni.Models.ShipGeneratorItem>()
                                                    .Name("shipGeneratorList")
                                                    .Columns(columns =>
                                                    {
                                                        columns.Bound(q => q.GeneratorGuid).Visible(false).Title(Localizer["#"].Value);
                                                        columns.Bound(q => q.Order).Width(50).Title(Localizer["#"].Value);
                                                        columns.Bound(q => q.Name).Title(Localizer["Unit"].Value);
                                                        columns.Bound(q => q.kW).Width(100).Title(Localizer["kW"].Value).HtmlAttributes(new { style = "text-align: right;" });
                                                        columns.Bound(q => q.KgDieselkWh).Width(110).Title(Localizer["Kg fuel/kWh"].Value).HtmlAttributes(new { style = "text-align: right;" });
                                                    })
                                                    .HtmlAttributes(new { style = "height: 300px;" })
                                                    .Scrollable()
                                                    .Selectable(s => s
                                                        .Mode(GridSelectionMode.Multiple)
                                                        .Type(GridSelectionType.Row))
                                                    .Events(e => e.Change("onGenerataorChange"))
                                                    .DataSource(dataSource => dataSource
                                                        .Ajax()
                                                        .Read(read => read.Action("GetShipGeneratorList", "Ship").Data("filterShip"))
                                                        )
                                                    )

                                                @(Html.Kendo().FloatingActionButton()
                                                    .Name("generatorsAdd")
                                                    .ThemeColor(FloatingActionButtonThemeColor.Success)
                                                    .Size(FloatingActionButtonSize.Small)
                                                    .PositionMode(FloatingActionButtonPositionMode.Absolute)
                                                    .Align(FloatingActionButtonAlign.TopEnd)
                                                    .AlignOffset(alignOffset => alignOffset.Horizontal(-10).Vertical(10))
                                                    .Icon("plusIcon")
                                                    .Events(events => events.Click("showDialogGenerators"))
                                                    .Visible(false)
                                                    )


                                                <div id="duplicateButtonContainer">
                                                    @(Html.Kendo().FloatingActionButton()
                                                        .Name("duplicateGenerator")
                                                        .ThemeColor(FloatingActionButtonThemeColor.Warning)
                                                        .Size(FloatingActionButtonSize.Small)
                                                        .PositionMode(FloatingActionButtonPositionMode.Absolute)
                                                        .Align(FloatingActionButtonAlign.TopEnd)
                                                        .AlignOffset(alignOffset => alignOffset.Horizontal(-10).Vertical(50))
                                                        .Icon("copy")
                                                        .Events(events => events.Click("duplicateSelectedGenerator"))
                                                        .Visible(false) // Inicialmente oculto, mas será ativado pelo script
                                                    )
                                                </div>


)

                                                @(Html.Kendo().FloatingActionButton()
                                                    .Name("generatorsImport")
                                                    .ThemeColor(FloatingActionButtonThemeColor.Success)
                                                    .Size(FloatingActionButtonSize.Small)
                                                    .PositionMode(FloatingActionButtonPositionMode.Absolute)
                                                    .Align(FloatingActionButtonAlign.TopEnd)
                                                    .AlignOffset(alignOffset => alignOffset.Horizontal(-10).Vertical(90))
                                                    .Icon("searchIcon")
                                                    .Events(events => events.Click("showDialogGeneratorsImport"))
                                                    .Visible(false)
                                                    )

                                                @(Html.Kendo().FloatingActionButton()
                                                    .Name("generatorsEdit")
                                                    .ThemeColor(FloatingActionButtonThemeColor.Warning)
                                                    .Size(FloatingActionButtonSize.Small)
                                                    .PositionMode(FloatingActionButtonPositionMode.Absolute)
                                                    .Align(FloatingActionButtonAlign.TopEnd)
                                                    .AlignOffset(alignOffset => alignOffset.Horizontal(-10).Vertical(130))
                                                    .Icon("pencilIcon")
                                                    .Events(events => events.Click("showDialogGeneratorsEdit"))
                                                    .Visible(false)
                                                    )

                                                @(Html.Kendo().FloatingActionButton()
                                                    .Name("generatorsRemove")
                                                    .ThemeColor(FloatingActionButtonThemeColor.Error)
                                                    .Size(FloatingActionButtonSize.Small)
                                                    .PositionMode(FloatingActionButtonPositionMode.Absolute)
                                                    .Align(FloatingActionButtonAlign.TopEnd)
                                                    .AlignOffset(alignOffset => alignOffset.Horizontal(-10).Vertical(170))
                                                    .Icon("trashIcon")
                                                    .Events(events => events.Click("removeGenerator"))
                                                    .Visible(false)
                                                    )

                                            </div>
                                        </div>
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>


</div>


<script>

    $(document).ready(function () {

        var fbOMA = $("#operationModeAdd").getKendoFloatingActionButton();
        var fbCOP = $("#operationModeCopy").getKendoFloatingActionButton();
        var fbOMR = $("#operationModeRemove").getKendoFloatingActionButton();
        var fbOME = $("#operationModeEdit").getKendoFloatingActionButton();

        $("#operationModeAdd").prop("type", "button");
        $("#operationModeCopy").prop("type", "button");
        $("#operationModeRemove").prop("type", "button");
        $("#operationModeEdit").prop("type", "button");

        fbOMAText = "Add operation mode";
        fbCOPText = "Copy operation mode";
        fbOMRText = "Remove operation mode";
        fbOMEText = "Edit operation mode";

        $("#operationModeAdd").hover(function () {
            fbOMA.text(fbOMAText);
            fbOMA.element.find(".k-fab-text")
                    .stop().toggle(200);
            }, function () {
            fbOMA.element.find(".k-fab-text")
                    .stop()
                    .toggle(200)
                    .promise().done(function () {
                    fbOMA.text("");
                    });
            });




        $("#operationModeCopy").hover(function () {
            fbCOP.text(fbCOPText);
            fbCOP.element.find(".k-fab-text")
                .stop().toggle(200);
        }, function () {
            fbCOP.element.find(".k-fab-text")
                .stop()
                .toggle(200)
                .promise().done(function () {
                    fbCOP.text("");
                });
        });

        $("#operationModeRemove").hover(function () {
            fbOMR.text(fbOMRText);
            fbOMR.element.find(".k-fab-text")
                    .stop().toggle(200);
            }, function () {
            fbOMR.element.find(".k-fab-text")
                    .stop()
                    .toggle(200)
                    .promise().done(function () {
                    fbOMR.text("");
                    });
            });

        $("#operationModeEdit").hover(function () {
            fbOME.text(fbOMEText);
            fbOME.element.find(".k-fab-text")
                    .stop().toggle(200);
            }, function () {
            fbOME.element.find(".k-fab-text")
                    .stop()
                    .toggle(200)
                    .promise().done(function () {
                    fbOME.text("");
                    });
            });


        var fbGA = $("#generatorsAdd").getKendoFloatingActionButton();
        var fbDU = $("#duplicateGenerator").getKendoFloatingActionButton();
        var fbGI = $("#generatorsImport").getKendoFloatingActionButton();
        var fbGR = $("#generatorsRemove").getKendoFloatingActionButton();
        var fbGE = $("#generatorsEdit").getKendoFloatingActionButton();

        $("#generatorsAdd").prop("type", "button");
        $("#duplicateGenerator").prop("type", "button");
        $("#generatorsImport").prop("type", "button");
        $("#generatorsRemove").prop("type", "button");
        $("#generatorsEdit").prop("type", "button");

        $("#generatorsAdd").hover(function () {
            fbGA.text("Add Power Source");
            fbGA.element.find(".k-fab-text")
                .stop().toggle(200);
        }, function () {
            fbGA.element.find(".k-fab-text")
                .stop()
                .toggle(200)
                .promise().done(function () {
                    fbGA.text("");
                });
            });


        $("#duplicateGenerator").hover(function () {
            fbDU.text("Duplicate Power Source");
            fbDU.element.find(".k-fab-text")
                .stop().toggle(200);
        }, function () {
            fbDU.element.find(".k-fab-text")
                .stop()
                .toggle(200)
                .promise().done(function () {
                    fbDU.text("");
                });
        });
                    
        $("#generatorsImport").hover(function () {
            fbGI.text("Import Power Source");
            fbGI.element.find(".k-fab-text")
                .stop().toggle(200);
        }, function () {
            fbGI.element.find(".k-fab-text")
                .stop()
                .toggle(200)
                .promise().done(function () {
                    fbGI.text("");
                });
            });

        $("#generatorsRemove").hover(function () {
            fbGR.text("Remove Power Source");
            fbGR.element.find(".k-fab-text")
                .stop().toggle(200);
        }, function () {
            fbGR.element.find(".k-fab-text")
                .stop()
                .toggle(200)
                .promise().done(function () {
                    fbGR.text("");
                });
            });

        $("#generatorsEdit").hover(function () {
            fbGE.text("Edit Power Source");
            fbGE.element.find(".k-fab-text")
                .stop().toggle(200);
        }, function () {
            fbGE.element.find(".k-fab-text")
                .stop()
                .toggle(200)
                .promise().done(function () {
                    fbGE.text("");
                });
            });

        var fbPA = $("#profileAdd").getKendoFloatingActionButton();
        var fbCOPI = $("#profileCopy").getKendoFloatingActionButton();
        var fbPR = $("#profileRemove").getKendoFloatingActionButton();
        var fbPE = $("#profileEdit").getKendoFloatingActionButton();

        $("#profileAdd").prop("type", "button");
        $("#profileCopy").prop("type", "button");
        $("#profileRemove").prop("type", "button");
        $("#profileEdit").prop("type", "button");

        fbPAText = "Add profile";
        fbCOPIText = "Copy profile";
        fbPRText = "Remove profile";
        fbPEText = "Edit profile";


        $("#profileAdd").hover(function () {
            fbPA.text(fbPAText);
            fbPA.element.find(".k-fab-text")
                .stop().toggle(200);
        }, function () {
            fbPA.element.find(".k-fab-text")
                .stop()
                .toggle(200)
                .promise().done(function () {
                    fbPA.text("");
                });
        });


        $("#profileCopy").hover(function () {
            fbCOPI.text(fbCOPIText);
            fbCOPI.element.find(".k-fab-text")
                .stop().toggle(200);
        }, function () {
            fbCOPI.element.find(".k-fab-text")
                .stop()
                .toggle(200)
                .promise().done(function () {
                    fbCOPI.text("");
                });
        });

        $("#profileRemove").hover(function () {
            fbPR.text(fbPRText);
            fbPR.element.find(".k-fab-text")
                .stop().toggle(200);
        }, function () {
            fbPR.element.find(".k-fab-text")
                .stop()
                .toggle(200)
                .promise().done(function () {
                    fbPR.text("");
                });
        });

        $("#profileEdit").hover(function () {
            fbPE.text(fbPEText);
            fbPE.element.find(".k-fab-text")
                .stop().toggle(200);
        }, function () {
            fbPE.element.find(".k-fab-text")
                .stop()
                .toggle(200)
                .promise().done(function () {
                    fbPE.text("");
                });
        });

    });

    $("#shipGeneratorList").on("dblclick", "tr.k-state-selected", function () {
        if (typeof showDialogGeneratorsEdit === "function") {
            showDialogGeneratorsEdit();
        } else {
            console.error("Error: function showDialogGeneratorsEdit is not defined!");
        }
    });



    $(document).ready(function () {
        $("#shipGeneratorList").data("kendoGrid").bind("dataBound", function () {
            var grid = $("#shipGeneratorList").data("kendoGrid");
            var totalRows = grid.dataSource.total();
            renderFuelPriceTable(); 


            console.log("Total generators found:",
            
             totalRows);

            if (totalRows > 0) {
                var duplicateButton = $("#duplicateGenerator").data("kendoFloatingActionButton");

                if (!duplicateButton) {
                    console.log("Duplicate button not found, trying to initialize...");
                    $("#duplicateGenerator").kendoFloatingActionButton(); // Inicializa o botão se ainda não estiver ativo
                    duplicateButton = $("#duplicateGenerator").data("kendoFloatingActionButton");
                }

                if (duplicateButton) {
                    duplicateButton.show();
                    console.log("Duplicate button activated!");
                } else {
                    console.log("Error: duplicate button still not found!");
                }
            }
        });
    });


    $(document).ready(function () {
        if ($("#duplicateGenerator").length) {
            console.log("Duplicate button found.");
        } else {
            console.log("Duplicate button NOT found!");
        }
    });


    function renderFuelPriceTable() {
        grid = $("#shipGeneratorList").data("kendoGrid"); 
        if (!grid) return;

        const data = grid.dataSource.data();

        if (data.length === 0) {
            $("#fuelPricesContainer").hide();
            return;
        }

        const grouped = {};
        data.forEach(item => {
            const guid = item.FuelTypeGuid || "Unknown";
            if (!grouped[guid]) {
                grouped[guid] = {
                    FuelTypeGuid: guid,
                    FuelTypeName: item.FuelTypeName || "Unknown",
                    Price: item.FuelPrice || 0
                };
            }
        });

        let html = "";
        Object.values(grouped).forEach(group => {
            html += `
                <tr>
                    <td>${group.FuelTypeName}</td>
                    <td>
                        <input type="number" step="0.01" class="form-control form-control-sm fuel-price-input"
                            data-guid="${group.FuelTypeGuid}" value="${group.Price}" />
                    </td>
                </tr>`;
        });

        $("#fuelPricesTable").html(html);
        $("#fuelPricesContainer").show();
    }


    var addedFuelPrices = window.addedFuelPrices || [];


    function addFuelPriceRow() {
        const fuelType = $("#fuelTypeSelector").val();
        const price = parseFloat($("#fuelPriceInput").val());

        if (!fuelType) {
            alert("Select a fuel type.");
            return;
        }

        if (isNaN(price)) {
            alert("Enter a valid price.");
            return;
        }

        // Evita duplicidade
        const existing = addedFuelPrices.find(item => item.FuelType === fuelType);
        if (existing) {
            existing.Price = price;
        } else {
            addedFuelPrices.push({ FuelType: fuelType, Price: price });
        }

        renderManualFuelPriceTable();
        $("#fuelPriceInput").val("");
        $("#fuelTypeSelector").val("");
    }

    function renderManualFuelPriceTable() {
        const tbody = $("#fuelPricesTable");
        tbody.empty();

        addedFuelPrices.forEach(item => {
            tbody.append(`
                <tr>
                    <td>${item.FuelType}</td>
                    <td>
                        <input type="number" class="form-control form-control-sm fuel-price-input" 
                            data-type="${item.FuelType}" value="${item.Price}" step="0.01"
                            onchange="updateFuelPrice('${item.FuelType}', this.value)" />
                    </td>
                </tr>
            `);
        });
    }

    function updateFuelPrice(type, newPrice) {
        const item = addedFuelPrices.find(f => f.FuelType === type);
        if (item) {
            item.Price = parseFloat(newPrice);
        }
    }

    $("#addFuelPriceBtn").on("click", addFuelPriceRow);



    if (grid) {
        const data = grid.dataSource.data();
        data.forEach(item => {
            if (item.FuelTypeGuid === type) {
                item.FuelPrice = parseFloat(newPrice);
            }
        });
        grid.refresh();
    }





    
</script>